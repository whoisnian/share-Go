name: docker

on:
  push:
    tags: ["v*"]

jobs:
  build-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    outputs:
      amd64_tag: ${{ steps.save.outputs.amd64_tag }}
      arm64_tag: ${{ steps.save.outputs.arm64_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: fe/package-lock.json

      - name: Install npm dependencies
        run: npm ci
        working-directory: fe

      - name: Build fe
        run: npm run build
        working-directory: fe

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for image
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}
          tags: type=ref,event=tag,suffix=-${{ matrix.arch }}
          flavor: latest=false

      - name: Extract module name
        id: modname
        run: echo "module_name=$(go mod edit -fmt -print | grep -Po '(?<=^module ).*$')" >> "$GITHUB_OUTPUT"

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile
          push: true
          provenance: false
          platforms: linux/${{ matrix.arch }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            MODULE_NAME=${{ steps.modname.outputs.module_name }}
            APP_NAME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }}-docker
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

      - name: Save image tag
        id: save
        run: echo "${{ matrix.arch }}_tag=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> "$GITHUB_OUTPUT"

  merge-images:
    runs-on: ubuntu-latest
    needs:
      - build-images
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for image
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}
          tags: type=ref,event=tag
          flavor: latest=true

      - name: Merge manifests and push
        run: |
          docker buildx imagetools create --tag $(jq -cr '.tags | join(" --tag ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          ${{ join(needs.build-images.outputs.*, ' ') }}

      - name: Inspect final image
        run: docker buildx imagetools inspect ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
